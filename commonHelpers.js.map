{"version":3,"file":"commonHelpers.js","sources":["../src/js/1-timer.js"],"sourcesContent":["import flatpickr from 'flatpickr';\nimport 'flatpickr/dist/flatpickr.min.css';\nimport iziToast from 'izitoast';\nimport 'izitoast/dist/css/iziToast.min.css';\n\nconst input = document.querySelector('#datetime-picker');\nconst button = document.querySelector('[data-start]');\nconst daysOutput = document.querySelector('[data-days]');\nconst hoursOutput = document.querySelector('[data-hours]');\nconst minutesOutput = document.querySelector('[data-minutes]');\nconst secondsOutput = document.querySelector('[data-seconds]');\n\nbutton.addEventListener('click', startTimer);\n\nlet userSelectedDate = null;\nlet timerId = null;\n\nconst options = {\n  enableTime: true,\n  time_24hr: true,\n  defaultDate: new Date(),\n  minuteIncrement: 1,\n  onClose(selectedDates) {\n    if (selectedDates[0] <= new Date()) {\n      button.disabled = true;\n      iziToast.error({\n        position: 'topRight',\n        message: 'Please choose a date in the future',\n      });\n      return;\n    }\n    userSelectedDate = selectedDates[0];\n    button.disabled = false;\n  },\n};\n\nflatpickr(input, options);\n\nfunction convertMs(ms) {\n  // Number of milliseconds per unit of time\n  const second = 1000;\n  const minute = second * 60;\n  const hour = minute * 60;\n  const day = hour * 24;\n\n  // Remaining days\n  const days = Math.floor(ms / day);\n  // Remaining hours\n  const hours = Math.floor((ms % day) / hour);\n  // Remaining minutes\n  const minutes = Math.floor(((ms % day) % hour) / minute);\n  // Remaining seconds\n  const seconds = Math.floor((((ms % day) % hour) % minute) / second);\n\n  return { days, hours, minutes, seconds };\n}\n\nfunction startTimer() {\n  timerId = setInterval(updateTimer, 1000);\n  button.disabled = true;\n  input.disabled = true;\n}\nfunction updateTimer() {\n  const timeDif = userSelectedDate - new Date();\n  if (timeDif <= 0) {\n    clearInterval(timerId);\n    input.disabled = false;\n    return;\n  }\n  const { days, hours, minutes, seconds } = convertMs(timeDif);\n  daysOutput.textContent = String(days).padStart(2, 0);\n  hoursOutput.textContent = String(hours).padStart(2, 0);\n  minutesOutput.textContent = String(minutes).padStart(2, 0);\n  secondsOutput.textContent = String(seconds).padStart(2, 0);\n}\n"],"names":["input","button","daysOutput","hoursOutput","minutesOutput","secondsOutput","startTimer","userSelectedDate","timerId","options","selectedDates","iziToast","flatpickr","convertMs","ms","days","hours","minutes","seconds","updateTimer","timeDif"],"mappings":"sGAKA,MAAMA,EAAQ,SAAS,cAAc,kBAAkB,EACjDC,EAAS,SAAS,cAAc,cAAc,EAC9CC,EAAa,SAAS,cAAc,aAAa,EACjDC,EAAc,SAAS,cAAc,cAAc,EACnDC,EAAgB,SAAS,cAAc,gBAAgB,EACvDC,EAAgB,SAAS,cAAc,gBAAgB,EAE7DJ,EAAO,iBAAiB,QAASK,CAAU,EAE3C,IAAIC,EAAmB,KACnBC,EAAU,KAEd,MAAMC,EAAU,CACd,WAAY,GACZ,UAAW,GACX,YAAa,IAAI,KACjB,gBAAiB,EACjB,QAAQC,EAAe,CACrB,GAAIA,EAAc,CAAC,GAAK,IAAI,KAAQ,CAClCT,EAAO,SAAW,GAClBU,EAAS,MAAM,CACb,SAAU,WACV,QAAS,oCACjB,CAAO,EACD,MACD,CACDJ,EAAmBG,EAAc,CAAC,EAClCT,EAAO,SAAW,EACnB,CACH,EAEAW,EAAUZ,EAAOS,CAAO,EAExB,SAASI,EAAUC,EAAI,CAQrB,MAAMC,EAAO,KAAK,MAAMD,EAAK,KAAG,EAE1BE,EAAQ,KAAK,MAAOF,EAAK,MAAO,IAAI,EAEpCG,EAAU,KAAK,MAAQH,EAAK,MAAO,KAAQ,GAAM,EAEjDI,EAAU,KAAK,MAASJ,EAAK,MAAO,KAAQ,IAAU,GAAM,EAElE,MAAO,CAAE,KAAAC,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,CACxC,CAEA,SAASZ,GAAa,CACpBE,EAAU,YAAYW,EAAa,GAAI,EACvClB,EAAO,SAAW,GAClBD,EAAM,SAAW,EACnB,CACA,SAASmB,GAAc,CACrB,MAAMC,EAAUb,EAAmB,IAAI,KACvC,GAAIa,GAAW,EAAG,CAChB,cAAcZ,CAAO,EACrBR,EAAM,SAAW,GACjB,MACD,CACD,KAAM,CAAE,KAAAe,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,GAAYL,EAAUO,CAAO,EAC3DlB,EAAW,YAAc,OAAOa,CAAI,EAAE,SAAS,EAAG,CAAC,EACnDZ,EAAY,YAAc,OAAOa,CAAK,EAAE,SAAS,EAAG,CAAC,EACrDZ,EAAc,YAAc,OAAOa,CAAO,EAAE,SAAS,EAAG,CAAC,EACzDZ,EAAc,YAAc,OAAOa,CAAO,EAAE,SAAS,EAAG,CAAC,CAC3D"}